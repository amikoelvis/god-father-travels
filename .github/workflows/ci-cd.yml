name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }} # or use dockerhub/yourrepo
  K8S_NAMESPACE: travel-app

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint (flake8)
        run: |
          pip install flake8
          flake8 || true
      - name: Run tests
        run: |
          pip install -r requirements.txt
          pytest -q

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io # change if Docker Hub or DOCR
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image (web)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest

      - name: Build and push celery image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: Dockerfile.celery
          tags: ${{ env.IMAGE_NAME }}:celery-latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.27.3"

      - name: Install yq
        run: |
          sudo add-apt-repository -y ppa:rmescandon/yq
          sudo apt-get update && sudo apt-get install -y yq

      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG_DATA" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config view

      - name: Apply k8s manifests
        env:
          KUBECONFIG: ${{ runner.temp }}/kubeconfig
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          # Apply manifests stored in k8s/ directory
          kubectl apply -f k8s/ -n ${K8S_NAMESPACE}

      - name: Run migrations in the cluster
        env:
          KUBECONFIG: $PWD/kubeconfig
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          # Wait for deployment to be ready
          kubectl rollout status deployment/travel-web -n ${K8S_NAMESPACE} --timeout=120s
          # Run migrate as a job/pod (simple one-off)
          kubectl run --rm --restart=Never migrate-job -n ${K8S_NAMESPACE} --image=${{ env.IMAGE_NAME }}:latest --command -- python manage.py migrate

      - name: Trigger celery worker restart
        env:
          KUBECONFIG: $PWD/kubeconfig
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl rollout restart deployment/travel-celery -n ${K8S_NAMESPACE}
